=begin
#Marketcheck Cars API

#<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module Marketcheck_api_sdk
  class SearchFacets
    attr_accessor :year

    attr_accessor :make

    attr_accessor :model

    attr_accessor :trim

    attr_accessor :trim_o

    attr_accessor :trim_r

    attr_accessor :body_type

    attr_accessor :body_subtype

    attr_accessor :vehicle_type

    attr_accessor :car_type

    attr_accessor :drivetrain

    attr_accessor :transmission

    attr_accessor :cylinders

    attr_accessor :fuel_type

    attr_accessor :exterior_color

    attr_accessor :interior_color

    attr_accessor :city

    attr_accessor :state

    attr_accessor :seller_type

    attr_accessor :doors

    attr_accessor :engine

    attr_accessor :engine_size

    attr_accessor :engine_aspiration

    attr_accessor :engine_block

    attr_accessor :source

    attr_accessor :seller_name_o

    attr_accessor :seller_name

    attr_accessor :dealer_id

    attr_accessor :data_source

    attr_accessor :carfax_1_owner

    attr_accessor :carfax_clean_title

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'year' => :'year',
        :'make' => :'make',
        :'model' => :'model',
        :'trim' => :'trim',
        :'trim_o' => :'trim_o',
        :'trim_r' => :'trim_r',
        :'body_type' => :'body_type',
        :'body_subtype' => :'body_subtype',
        :'vehicle_type' => :'vehicle_type',
        :'car_type' => :'car_type',
        :'drivetrain' => :'drivetrain',
        :'transmission' => :'transmission',
        :'cylinders' => :'cylinders',
        :'fuel_type' => :'fuel_type',
        :'exterior_color' => :'exterior_color',
        :'interior_color' => :'interior_color',
        :'city' => :'city',
        :'state' => :'state',
        :'seller_type' => :'seller_type',
        :'doors' => :'doors',
        :'engine' => :'engine',
        :'engine_size' => :'engine_size',
        :'engine_aspiration' => :'engine_aspiration',
        :'engine_block' => :'engine_block',
        :'source' => :'source',
        :'seller_name_o' => :'seller_name_o',
        :'seller_name' => :'seller_name',
        :'dealer_id' => :'dealer_id',
        :'data_source' => :'data_source',
        :'carfax_1_owner' => :'carfax_1_owner',
        :'carfax_clean_title' => :'carfax_clean_title'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'year' => :'Array<FacetItem>',
        :'make' => :'Array<FacetItem>',
        :'model' => :'Array<FacetItem>',
        :'trim' => :'Array<FacetItem>',
        :'trim_o' => :'Array<FacetItem>',
        :'trim_r' => :'Array<FacetItem>',
        :'body_type' => :'Array<FacetItem>',
        :'body_subtype' => :'Array<FacetItem>',
        :'vehicle_type' => :'Array<FacetItem>',
        :'car_type' => :'Array<FacetItem>',
        :'drivetrain' => :'Array<FacetItem>',
        :'transmission' => :'Array<FacetItem>',
        :'cylinders' => :'Array<FacetItem>',
        :'fuel_type' => :'Array<FacetItem>',
        :'exterior_color' => :'Array<FacetItem>',
        :'interior_color' => :'Array<FacetItem>',
        :'city' => :'Array<FacetItem>',
        :'state' => :'Array<FacetItem>',
        :'seller_type' => :'Array<FacetItem>',
        :'doors' => :'Array<FacetItem>',
        :'engine' => :'Array<FacetItem>',
        :'engine_size' => :'Array<FacetItem>',
        :'engine_aspiration' => :'Array<FacetItem>',
        :'engine_block' => :'Array<FacetItem>',
        :'source' => :'Array<FacetItem>',
        :'seller_name_o' => :'Array<FacetItem>',
        :'seller_name' => :'Array<FacetItem>',
        :'dealer_id' => :'Array<FacetItem>',
        :'data_source' => :'Array<FacetItem>',
        :'carfax_1_owner' => :'Array<FacetItem>',
        :'carfax_clean_title' => :'Array<FacetItem>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'year')
        if (value = attributes[:'year']).is_a?(Array)
          self.year = value
        end
      end

      if attributes.has_key?(:'make')
        if (value = attributes[:'make']).is_a?(Array)
          self.make = value
        end
      end

      if attributes.has_key?(:'model')
        if (value = attributes[:'model']).is_a?(Array)
          self.model = value
        end
      end

      if attributes.has_key?(:'trim')
        if (value = attributes[:'trim']).is_a?(Array)
          self.trim = value
        end
      end

      if attributes.has_key?(:'trim_o')
        if (value = attributes[:'trim_o']).is_a?(Array)
          self.trim_o = value
        end
      end

      if attributes.has_key?(:'trim_r')
        if (value = attributes[:'trim_r']).is_a?(Array)
          self.trim_r = value
        end
      end

      if attributes.has_key?(:'body_type')
        if (value = attributes[:'body_type']).is_a?(Array)
          self.body_type = value
        end
      end

      if attributes.has_key?(:'body_subtype')
        if (value = attributes[:'body_subtype']).is_a?(Array)
          self.body_subtype = value
        end
      end

      if attributes.has_key?(:'vehicle_type')
        if (value = attributes[:'vehicle_type']).is_a?(Array)
          self.vehicle_type = value
        end
      end

      if attributes.has_key?(:'car_type')
        if (value = attributes[:'car_type']).is_a?(Array)
          self.car_type = value
        end
      end

      if attributes.has_key?(:'drivetrain')
        if (value = attributes[:'drivetrain']).is_a?(Array)
          self.drivetrain = value
        end
      end

      if attributes.has_key?(:'transmission')
        if (value = attributes[:'transmission']).is_a?(Array)
          self.transmission = value
        end
      end

      if attributes.has_key?(:'cylinders')
        if (value = attributes[:'cylinders']).is_a?(Array)
          self.cylinders = value
        end
      end

      if attributes.has_key?(:'fuel_type')
        if (value = attributes[:'fuel_type']).is_a?(Array)
          self.fuel_type = value
        end
      end

      if attributes.has_key?(:'exterior_color')
        if (value = attributes[:'exterior_color']).is_a?(Array)
          self.exterior_color = value
        end
      end

      if attributes.has_key?(:'interior_color')
        if (value = attributes[:'interior_color']).is_a?(Array)
          self.interior_color = value
        end
      end

      if attributes.has_key?(:'city')
        if (value = attributes[:'city']).is_a?(Array)
          self.city = value
        end
      end

      if attributes.has_key?(:'state')
        if (value = attributes[:'state']).is_a?(Array)
          self.state = value
        end
      end

      if attributes.has_key?(:'seller_type')
        if (value = attributes[:'seller_type']).is_a?(Array)
          self.seller_type = value
        end
      end

      if attributes.has_key?(:'doors')
        if (value = attributes[:'doors']).is_a?(Array)
          self.doors = value
        end
      end

      if attributes.has_key?(:'engine')
        if (value = attributes[:'engine']).is_a?(Array)
          self.engine = value
        end
      end

      if attributes.has_key?(:'engine_size')
        if (value = attributes[:'engine_size']).is_a?(Array)
          self.engine_size = value
        end
      end

      if attributes.has_key?(:'engine_aspiration')
        if (value = attributes[:'engine_aspiration']).is_a?(Array)
          self.engine_aspiration = value
        end
      end

      if attributes.has_key?(:'engine_block')
        if (value = attributes[:'engine_block']).is_a?(Array)
          self.engine_block = value
        end
      end

      if attributes.has_key?(:'source')
        if (value = attributes[:'source']).is_a?(Array)
          self.source = value
        end
      end

      if attributes.has_key?(:'seller_name_o')
        if (value = attributes[:'seller_name_o']).is_a?(Array)
          self.seller_name_o = value
        end
      end

      if attributes.has_key?(:'seller_name')
        if (value = attributes[:'seller_name']).is_a?(Array)
          self.seller_name = value
        end
      end

      if attributes.has_key?(:'dealer_id')
        if (value = attributes[:'dealer_id']).is_a?(Array)
          self.dealer_id = value
        end
      end

      if attributes.has_key?(:'data_source')
        if (value = attributes[:'data_source']).is_a?(Array)
          self.data_source = value
        end
      end

      if attributes.has_key?(:'carfax_1_owner')
        if (value = attributes[:'carfax_1_owner']).is_a?(Array)
          self.carfax_1_owner = value
        end
      end

      if attributes.has_key?(:'carfax_clean_title')
        if (value = attributes[:'carfax_clean_title']).is_a?(Array)
          self.carfax_clean_title = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          year == o.year &&
          make == o.make &&
          model == o.model &&
          trim == o.trim &&
          trim_o == o.trim_o &&
          trim_r == o.trim_r &&
          body_type == o.body_type &&
          body_subtype == o.body_subtype &&
          vehicle_type == o.vehicle_type &&
          car_type == o.car_type &&
          drivetrain == o.drivetrain &&
          transmission == o.transmission &&
          cylinders == o.cylinders &&
          fuel_type == o.fuel_type &&
          exterior_color == o.exterior_color &&
          interior_color == o.interior_color &&
          city == o.city &&
          state == o.state &&
          seller_type == o.seller_type &&
          doors == o.doors &&
          engine == o.engine &&
          engine_size == o.engine_size &&
          engine_aspiration == o.engine_aspiration &&
          engine_block == o.engine_block &&
          source == o.source &&
          seller_name_o == o.seller_name_o &&
          seller_name == o.seller_name &&
          dealer_id == o.dealer_id &&
          data_source == o.data_source &&
          carfax_1_owner == o.carfax_1_owner &&
          carfax_clean_title == o.carfax_clean_title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [year, make, model, trim, trim_o, trim_r, body_type, body_subtype, vehicle_type, car_type, drivetrain, transmission, cylinders, fuel_type, exterior_color, interior_color, city, state, seller_type, doors, engine, engine_size, engine_aspiration, engine_block, source, seller_name_o, seller_name, dealer_id, data_source, carfax_1_owner, carfax_clean_title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Marketcheck_api_sdk.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

=begin
#Marketcheck Cars API

#<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module Marketcheck_api_sdk
  # Represents a full list of attributes available with Marketcheck for a car
  class Listing
    # Unique identifier representing a specific listing from the Marketcheck database
    attr_accessor :id

    # VIN for the car
    attr_accessor :vin

    # Listing title as displayed on the source website
    attr_accessor :heading

    # Asking price for the car
    attr_accessor :price

    # Odometer reading / reported miles usage for the car
    attr_accessor :miles

    # MSRP for the car
    attr_accessor :msrp

    # Data source of the listing
    attr_accessor :data_source

    # Certified car
    attr_accessor :is_certified

    # Vehicle Details Page url of the specific car
    attr_accessor :vdp_url

    # Flag to indicate whether listing is carfax_1_owner
    attr_accessor :carfax_1_owner

    # Flag to indicate whether listing is carfax_clean_title
    attr_accessor :carfax_clean_title

    # Exterior color of the car
    attr_accessor :exterior_color

    # Interior color of the car
    attr_accessor :interior_color

    # Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
    attr_accessor :dom

    # Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
    attr_accessor :dom_180

    # Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
    attr_accessor :dom_active

    # Seller type for the car
    attr_accessor :seller_type

    # Inventory type of car
    attr_accessor :inventory_type

    # Stock number of car in dealers inventory
    attr_accessor :stock_no

    # Listing last seen at (most recent) timestamp
    attr_accessor :last_seen_at

    # Listing last seen at (most recent) date
    attr_accessor :last_seen_at_date

    # Listing last seen at date timestamp
    attr_accessor :scraped_at

    # Listing last seen at date
    attr_accessor :scraped_at_date

    # Listing first seen at first scraped timestamp
    attr_accessor :first_seen_at

    # Listing first seen at first scraped date
    attr_accessor :first_seen_at_date

    # Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
    attr_accessor :ref_price

    # The date at which the last price was reported online. This is earlier to last_seen_date
    attr_accessor :ref_price_dt

    # Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
    attr_accessor :ref_miles

    # The date at which the last miles was reported online. This is earlier to last_seen_date
    attr_accessor :ref_miles_dt

    # Source domain of the listing
    attr_accessor :source

    # Array of all finance offers for this listing
    attr_accessor :financing_options

    # Array of all finance offers for this listing
    attr_accessor :leasing_options

    # Car Media Attributes - main photo link/url and photo links
    attr_accessor :media

    # Extra attributes for the listing - options, features, seller comments etc
    attr_accessor :extra

    # Dealer details of listing
    attr_accessor :dealer

    # Build / Specifications attributes
    attr_accessor :build

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'vin' => :'vin',
        :'heading' => :'heading',
        :'price' => :'price',
        :'miles' => :'miles',
        :'msrp' => :'msrp',
        :'data_source' => :'data_source',
        :'is_certified' => :'is_certified',
        :'vdp_url' => :'vdp_url',
        :'carfax_1_owner' => :'carfax_1_owner',
        :'carfax_clean_title' => :'carfax_clean_title',
        :'exterior_color' => :'exterior_color',
        :'interior_color' => :'interior_color',
        :'dom' => :'dom',
        :'dom_180' => :'dom_180',
        :'dom_active' => :'dom_active',
        :'seller_type' => :'seller_type',
        :'inventory_type' => :'inventory_type',
        :'stock_no' => :'stock_no',
        :'last_seen_at' => :'last_seen_at',
        :'last_seen_at_date' => :'last_seen_at_date',
        :'scraped_at' => :'scraped_at',
        :'scraped_at_date' => :'scraped_at_date',
        :'first_seen_at' => :'first_seen_at',
        :'first_seen_at_date' => :'first_seen_at_date',
        :'ref_price' => :'ref_price',
        :'ref_price_dt' => :'ref_price_dt',
        :'ref_miles' => :'ref_miles',
        :'ref_miles_dt' => :'ref_miles_dt',
        :'source' => :'source',
        :'financing_options' => :'financing_options',
        :'leasing_options' => :'leasing_options',
        :'media' => :'media',
        :'extra' => :'extra',
        :'dealer' => :'dealer',
        :'build' => :'build'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'vin' => :'String',
        :'heading' => :'String',
        :'price' => :'Integer',
        :'miles' => :'Integer',
        :'msrp' => :'Integer',
        :'data_source' => :'String',
        :'is_certified' => :'Integer',
        :'vdp_url' => :'String',
        :'carfax_1_owner' => :'BOOLEAN',
        :'carfax_clean_title' => :'BOOLEAN',
        :'exterior_color' => :'String',
        :'interior_color' => :'String',
        :'dom' => :'Integer',
        :'dom_180' => :'Integer',
        :'dom_active' => :'Integer',
        :'seller_type' => :'String',
        :'inventory_type' => :'String',
        :'stock_no' => :'String',
        :'last_seen_at' => :'Integer',
        :'last_seen_at_date' => :'String',
        :'scraped_at' => :'Integer',
        :'scraped_at_date' => :'String',
        :'first_seen_at' => :'Integer',
        :'first_seen_at_date' => :'String',
        :'ref_price' => :'String',
        :'ref_price_dt' => :'Integer',
        :'ref_miles' => :'String',
        :'ref_miles_dt' => :'Integer',
        :'source' => :'String',
        :'financing_options' => :'Array<ListingFinance>',
        :'leasing_options' => :'Array<ListingLease>',
        :'media' => :'ListingNestMedia',
        :'extra' => :'ListingNestExtraAttributes',
        :'dealer' => :'NestDealer',
        :'build' => :'Build'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'vin')
        self.vin = attributes[:'vin']
      end

      if attributes.has_key?(:'heading')
        self.heading = attributes[:'heading']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'miles')
        self.miles = attributes[:'miles']
      end

      if attributes.has_key?(:'msrp')
        self.msrp = attributes[:'msrp']
      end

      if attributes.has_key?(:'data_source')
        self.data_source = attributes[:'data_source']
      end

      if attributes.has_key?(:'is_certified')
        self.is_certified = attributes[:'is_certified']
      end

      if attributes.has_key?(:'vdp_url')
        self.vdp_url = attributes[:'vdp_url']
      end

      if attributes.has_key?(:'carfax_1_owner')
        self.carfax_1_owner = attributes[:'carfax_1_owner']
      end

      if attributes.has_key?(:'carfax_clean_title')
        self.carfax_clean_title = attributes[:'carfax_clean_title']
      end

      if attributes.has_key?(:'exterior_color')
        self.exterior_color = attributes[:'exterior_color']
      end

      if attributes.has_key?(:'interior_color')
        self.interior_color = attributes[:'interior_color']
      end

      if attributes.has_key?(:'dom')
        self.dom = attributes[:'dom']
      end

      if attributes.has_key?(:'dom_180')
        self.dom_180 = attributes[:'dom_180']
      end

      if attributes.has_key?(:'dom_active')
        self.dom_active = attributes[:'dom_active']
      end

      if attributes.has_key?(:'seller_type')
        self.seller_type = attributes[:'seller_type']
      end

      if attributes.has_key?(:'inventory_type')
        self.inventory_type = attributes[:'inventory_type']
      end

      if attributes.has_key?(:'stock_no')
        self.stock_no = attributes[:'stock_no']
      end

      if attributes.has_key?(:'last_seen_at')
        self.last_seen_at = attributes[:'last_seen_at']
      end

      if attributes.has_key?(:'last_seen_at_date')
        self.last_seen_at_date = attributes[:'last_seen_at_date']
      end

      if attributes.has_key?(:'scraped_at')
        self.scraped_at = attributes[:'scraped_at']
      end

      if attributes.has_key?(:'scraped_at_date')
        self.scraped_at_date = attributes[:'scraped_at_date']
      end

      if attributes.has_key?(:'first_seen_at')
        self.first_seen_at = attributes[:'first_seen_at']
      end

      if attributes.has_key?(:'first_seen_at_date')
        self.first_seen_at_date = attributes[:'first_seen_at_date']
      end

      if attributes.has_key?(:'ref_price')
        self.ref_price = attributes[:'ref_price']
      end

      if attributes.has_key?(:'ref_price_dt')
        self.ref_price_dt = attributes[:'ref_price_dt']
      end

      if attributes.has_key?(:'ref_miles')
        self.ref_miles = attributes[:'ref_miles']
      end

      if attributes.has_key?(:'ref_miles_dt')
        self.ref_miles_dt = attributes[:'ref_miles_dt']
      end

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'financing_options')
        if (value = attributes[:'financing_options']).is_a?(Array)
          self.financing_options = value
        end
      end

      if attributes.has_key?(:'leasing_options')
        if (value = attributes[:'leasing_options']).is_a?(Array)
          self.leasing_options = value
        end
      end

      if attributes.has_key?(:'media')
        self.media = attributes[:'media']
      end

      if attributes.has_key?(:'extra')
        self.extra = attributes[:'extra']
      end

      if attributes.has_key?(:'dealer')
        self.dealer = attributes[:'dealer']
      end

      if attributes.has_key?(:'build')
        self.build = attributes[:'build']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          vin == o.vin &&
          heading == o.heading &&
          price == o.price &&
          miles == o.miles &&
          msrp == o.msrp &&
          data_source == o.data_source &&
          is_certified == o.is_certified &&
          vdp_url == o.vdp_url &&
          carfax_1_owner == o.carfax_1_owner &&
          carfax_clean_title == o.carfax_clean_title &&
          exterior_color == o.exterior_color &&
          interior_color == o.interior_color &&
          dom == o.dom &&
          dom_180 == o.dom_180 &&
          dom_active == o.dom_active &&
          seller_type == o.seller_type &&
          inventory_type == o.inventory_type &&
          stock_no == o.stock_no &&
          last_seen_at == o.last_seen_at &&
          last_seen_at_date == o.last_seen_at_date &&
          scraped_at == o.scraped_at &&
          scraped_at_date == o.scraped_at_date &&
          first_seen_at == o.first_seen_at &&
          first_seen_at_date == o.first_seen_at_date &&
          ref_price == o.ref_price &&
          ref_price_dt == o.ref_price_dt &&
          ref_miles == o.ref_miles &&
          ref_miles_dt == o.ref_miles_dt &&
          source == o.source &&
          financing_options == o.financing_options &&
          leasing_options == o.leasing_options &&
          media == o.media &&
          extra == o.extra &&
          dealer == o.dealer &&
          build == o.build
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, vin, heading, price, miles, msrp, data_source, is_certified, vdp_url, carfax_1_owner, carfax_clean_title, exterior_color, interior_color, dom, dom_180, dom_active, seller_type, inventory_type, stock_no, last_seen_at, last_seen_at_date, scraped_at, scraped_at_date, first_seen_at, first_seen_at_date, ref_price, ref_price_dt, ref_miles, ref_miles_dt, source, financing_options, leasing_options, media, extra, dealer, build].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Marketcheck_api_sdk.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

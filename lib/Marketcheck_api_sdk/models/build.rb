=begin
#Marketcheck Cars API

#<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module Marketcheck_api_sdk
  # Describes the Car specification
  class Build
    # Year of the Car
    attr_accessor :year

    # Car Make
    attr_accessor :make

    # Car model
    attr_accessor :model

    # Trim of the car
    attr_accessor :trim

    # Short trim of the car
    attr_accessor :short_trim

    # Body type of the car
    attr_accessor :body_type

    # Body subtype of the car
    attr_accessor :body_subtype

    # Vehicle type of the car
    attr_accessor :vehicle_type

    # Transmission of the car
    attr_accessor :transmission

    # Drivetrain of the car
    attr_accessor :drivetrain

    # Fuel type of the car
    attr_accessor :fuel_type

    # Engine of the car
    attr_accessor :engine

    # Engine size of the car
    attr_accessor :engine_size

    # Engine block of the car
    attr_accessor :engine_block

    # No of doors of the car
    attr_accessor :doors

    # No of cylinders of the car
    attr_accessor :cylinders

    # Made in of the car
    attr_accessor :made_in

    # Steering type of the car
    attr_accessor :steering_type

    # Antibrake system of the car
    attr_accessor :antibrake_sys

    # Tank size of the car
    attr_accessor :tank_size

    # Overall height of the car
    attr_accessor :overall_height

    # Overall length of the car
    attr_accessor :overall_length

    # Overall width of the car
    attr_accessor :overall_width

    # Std seating of the car
    attr_accessor :std_seating

    # opt seating of the car
    attr_accessor :opt_seating

    # Highway miles of the car
    attr_accessor :highway_miles

    # City miles of the car
    attr_accessor :city_miles

    # Engine block of the car
    attr_accessor :engine_measure

    # Engine aspiration of the car
    attr_accessor :engine_aspiration

    # Trim_r of the car
    attr_accessor :trim_r

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'year' => :'year',
        :'make' => :'make',
        :'model' => :'model',
        :'trim' => :'trim',
        :'short_trim' => :'short_trim',
        :'body_type' => :'body_type',
        :'body_subtype' => :'body_subtype',
        :'vehicle_type' => :'vehicle_type',
        :'transmission' => :'transmission',
        :'drivetrain' => :'drivetrain',
        :'fuel_type' => :'fuel_type',
        :'engine' => :'engine',
        :'engine_size' => :'engine_size',
        :'engine_block' => :'engine_block',
        :'doors' => :'doors',
        :'cylinders' => :'cylinders',
        :'made_in' => :'made_in',
        :'steering_type' => :'steering_type',
        :'antibrake_sys' => :'antibrake_sys',
        :'tank_size' => :'tank_size',
        :'overall_height' => :'overall_height',
        :'overall_length' => :'overall_length',
        :'overall_width' => :'overall_width',
        :'std_seating' => :'std_seating',
        :'opt_seating' => :'opt_seating',
        :'highway_miles' => :'highway_miles',
        :'city_miles' => :'city_miles',
        :'engine_measure' => :'engine_measure',
        :'engine_aspiration' => :'engine_aspiration',
        :'trim_r' => :'trim_r'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'year' => :'Integer',
        :'make' => :'String',
        :'model' => :'String',
        :'trim' => :'String',
        :'short_trim' => :'String',
        :'body_type' => :'String',
        :'body_subtype' => :'String',
        :'vehicle_type' => :'String',
        :'transmission' => :'String',
        :'drivetrain' => :'String',
        :'fuel_type' => :'String',
        :'engine' => :'String',
        :'engine_size' => :'Float',
        :'engine_block' => :'String',
        :'doors' => :'Integer',
        :'cylinders' => :'Integer',
        :'made_in' => :'String',
        :'steering_type' => :'String',
        :'antibrake_sys' => :'String',
        :'tank_size' => :'String',
        :'overall_height' => :'String',
        :'overall_length' => :'String',
        :'overall_width' => :'String',
        :'std_seating' => :'String',
        :'opt_seating' => :'String',
        :'highway_miles' => :'String',
        :'city_miles' => :'String',
        :'engine_measure' => :'String',
        :'engine_aspiration' => :'String',
        :'trim_r' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.has_key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'trim')
        self.trim = attributes[:'trim']
      end

      if attributes.has_key?(:'short_trim')
        self.short_trim = attributes[:'short_trim']
      end

      if attributes.has_key?(:'body_type')
        self.body_type = attributes[:'body_type']
      end

      if attributes.has_key?(:'body_subtype')
        self.body_subtype = attributes[:'body_subtype']
      end

      if attributes.has_key?(:'vehicle_type')
        self.vehicle_type = attributes[:'vehicle_type']
      end

      if attributes.has_key?(:'transmission')
        self.transmission = attributes[:'transmission']
      end

      if attributes.has_key?(:'drivetrain')
        self.drivetrain = attributes[:'drivetrain']
      end

      if attributes.has_key?(:'fuel_type')
        self.fuel_type = attributes[:'fuel_type']
      end

      if attributes.has_key?(:'engine')
        self.engine = attributes[:'engine']
      end

      if attributes.has_key?(:'engine_size')
        self.engine_size = attributes[:'engine_size']
      end

      if attributes.has_key?(:'engine_block')
        self.engine_block = attributes[:'engine_block']
      end

      if attributes.has_key?(:'doors')
        self.doors = attributes[:'doors']
      end

      if attributes.has_key?(:'cylinders')
        self.cylinders = attributes[:'cylinders']
      end

      if attributes.has_key?(:'made_in')
        self.made_in = attributes[:'made_in']
      end

      if attributes.has_key?(:'steering_type')
        self.steering_type = attributes[:'steering_type']
      end

      if attributes.has_key?(:'antibrake_sys')
        self.antibrake_sys = attributes[:'antibrake_sys']
      end

      if attributes.has_key?(:'tank_size')
        self.tank_size = attributes[:'tank_size']
      end

      if attributes.has_key?(:'overall_height')
        self.overall_height = attributes[:'overall_height']
      end

      if attributes.has_key?(:'overall_length')
        self.overall_length = attributes[:'overall_length']
      end

      if attributes.has_key?(:'overall_width')
        self.overall_width = attributes[:'overall_width']
      end

      if attributes.has_key?(:'std_seating')
        self.std_seating = attributes[:'std_seating']
      end

      if attributes.has_key?(:'opt_seating')
        self.opt_seating = attributes[:'opt_seating']
      end

      if attributes.has_key?(:'highway_miles')
        self.highway_miles = attributes[:'highway_miles']
      end

      if attributes.has_key?(:'city_miles')
        self.city_miles = attributes[:'city_miles']
      end

      if attributes.has_key?(:'engine_measure')
        self.engine_measure = attributes[:'engine_measure']
      end

      if attributes.has_key?(:'engine_aspiration')
        self.engine_aspiration = attributes[:'engine_aspiration']
      end

      if attributes.has_key?(:'trim_r')
        self.trim_r = attributes[:'trim_r']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          year == o.year &&
          make == o.make &&
          model == o.model &&
          trim == o.trim &&
          short_trim == o.short_trim &&
          body_type == o.body_type &&
          body_subtype == o.body_subtype &&
          vehicle_type == o.vehicle_type &&
          transmission == o.transmission &&
          drivetrain == o.drivetrain &&
          fuel_type == o.fuel_type &&
          engine == o.engine &&
          engine_size == o.engine_size &&
          engine_block == o.engine_block &&
          doors == o.doors &&
          cylinders == o.cylinders &&
          made_in == o.made_in &&
          steering_type == o.steering_type &&
          antibrake_sys == o.antibrake_sys &&
          tank_size == o.tank_size &&
          overall_height == o.overall_height &&
          overall_length == o.overall_length &&
          overall_width == o.overall_width &&
          std_seating == o.std_seating &&
          opt_seating == o.opt_seating &&
          highway_miles == o.highway_miles &&
          city_miles == o.city_miles &&
          engine_measure == o.engine_measure &&
          engine_aspiration == o.engine_aspiration &&
          trim_r == o.trim_r
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [year, make, model, trim, short_trim, body_type, body_subtype, vehicle_type, transmission, drivetrain, fuel_type, engine, engine_size, engine_block, doors, cylinders, made_in, steering_type, antibrake_sys, tank_size, overall_height, overall_length, overall_width, std_seating, opt_seating, highway_miles, city_miles, engine_measure, engine_aspiration, trim_r].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Marketcheck_api_sdk.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

=begin
#Marketcheck Cars API

#<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module Marketcheck_api_sdk
  class ListingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Listing by id
    # Get a particular listing by its id
    # @param id Listing id to get all the listing attributes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Listing]
    def get_listing(id, opts = {})
      data, _status_code, _headers = get_listing_with_http_info(id, opts)
      data
    end

    # Listing by id
    # Get a particular listing by its id
    # @param id Listing id to get all the listing attributes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(Listing, Fixnum, Hash)>] Listing data, response status code and response headers
    def get_listing_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_listing ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListingsApi.get_listing"
      end
      # resource path
      local_var_path = '/listing/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Listing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_listing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Long text Listings attributes for Listing with the given id
    # Get listing options, features, seller comments
    # @param id Listing id to get all the long text listing attributes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [ListingExtraAttributes]
    def get_listing_extra(id, opts = {})
      data, _status_code, _headers = get_listing_extra_with_http_info(id, opts)
      data
    end

    # Long text Listings attributes for Listing with the given id
    # Get listing options, features, seller comments
    # @param id Listing id to get all the long text listing attributes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(ListingExtraAttributes, Fixnum, Hash)>] ListingExtraAttributes data, response status code and response headers
    def get_listing_extra_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_listing_extra ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListingsApi.get_listing_extra"
      end
      # resource path
      local_var_path = '/listing/{id}/extra'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingExtraAttributes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_listing_extra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Listing media by id
    # Get listing media (photo, photos) by id
    # @param id Listing id to get all the listing attributes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [ListingMedia]
    def get_listing_media(id, opts = {})
      data, _status_code, _headers = get_listing_media_with_http_info(id, opts)
      data
    end

    # Listing media by id
    # Get listing media (photo, photos) by id
    # @param id Listing id to get all the listing attributes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(ListingMedia, Fixnum, Hash)>] ListingMedia data, response status code and response headers
    def get_listing_media_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_listing_media ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListingsApi.get_listing_media"
      end
      # resource path
      local_var_path = '/listing/{id}/media'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingMedia')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_listing_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get listing HTML
    # Cached HTML of the Vehicle Details Page (VDP) for the listing. The HTML is cached only for 7 days for all listings. So this API could be used to get HTML of mostly active listings and that have recently expired
    # @param id Listing id to get the vehicle details page (VDP) HTML
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :html Get only HTML for given listings VDP page
    # @return [ListingVDP]
    def get_listing_vdp(id, opts = {})
      data, _status_code, _headers = get_listing_vdp_with_http_info(id, opts)
      data
    end

    # Get listing HTML
    # Cached HTML of the Vehicle Details Page (VDP) for the listing. The HTML is cached only for 7 days for all listings. So this API could be used to get HTML of mostly active listings and that have recently expired
    # @param id Listing id to get the vehicle details page (VDP) HTML
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :html Get only HTML for given listings VDP page
    # @return [Array<(ListingVDP, Fixnum, Hash)>] ListingVDP data, response status code and response headers
    def get_listing_vdp_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_listing_vdp ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListingsApi.get_listing_vdp"
      end
      # resource path
      local_var_path = '/listing/{id}/vdp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'html'] = opts[:'html'] if !opts[:'html'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingVDP')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_listing_vdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Summary Report
    # [MOCK] Generate Summary report
    # @param vin VIN as a reference to the type of car for which Summary data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<VinReport>]
    def get_summary_report(vin, opts = {})
      data, _status_code, _headers = get_summary_report_with_http_info(vin, opts)
      data
    end

    # Get Summary Report
    # [MOCK] Generate Summary report
    # @param vin VIN as a reference to the type of car for which Summary data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(Array<VinReport>, Fixnum, Hash)>] Array<VinReport> data, response status code and response headers
    def get_summary_report_with_http_info(vin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_summary_report ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling ListingsApi.get_summary_report"
      end
      # resource path
      local_var_path = '/vin_report_summary'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<VinReport>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_summary_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets active car listings for the given search criteria
    # This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 1000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom/msrp for your search
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [Float] :latitude Latitude component of location
    # @option opts [Float] :longitude Longitude component of location
    # @option opts [Integer] :radius Radius around the search location
    # @option opts [String] :zip car search bases on zipcode
    # @option opts [BOOLEAN] :include_lease Boolean param to search for listings that include leasing options in them
    # @option opts [BOOLEAN] :include_finance Boolean param to search for listings that include finance options in them
    # @option opts [String] :lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60
    # @option opts [String] :lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60
    # @option opts [String] :lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60
    # @option opts [String] :finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60
    # @option opts [String] :finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60
    # @option opts [String] :finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60
    # @option opts [String] :finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60
    # @option opts [String] :finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60
    # @option opts [String] :car_type Car type. Allowed values are - new / used / certified
    # @option opts [String] :seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated.
    # @option opts [String] :carfax_1_owner Indicates whether car has had only one owner or not
    # @option opts [String] :carfax_clean_title Indicates whether car has clean ownership records
    # @option opts [String] :year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated.
    # @option opts [String] :make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi
    # @option opts [String] :model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang.
    # @option opts [String] :trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated
    # @option opts [String] :dealer_id Dealer id to filter the cars.
    # @option opts [String] :vin Car vin to search
    # @option opts [String] :source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated
    # @option opts [String] :body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated.
    # @option opts [String] :body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
    # @option opts [String] :vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated
    # @option opts [String] :vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
    # @option opts [String] :taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
    # @option opts [String] :ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations.
    # @option opts [String] :match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
    # @option opts [String] :cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated
    # @option opts [String] :transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated
    # @option opts [String] :speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated
    # @option opts [String] :doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
    # @option opts [String] :drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated
    # @option opts [String] :exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
    # @option opts [String] :interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
    # @option opts [String] :engine Filter listings on engine
    # @option opts [String] :engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated
    # @option opts [String] :engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
    # @option opts [String] :engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
    # @option opts [String] :miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
    # @option opts [String] :price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
    # @option opts [String] :dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
    # @option opts [String] :sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point
    # @option opts [String] :sort_order Sort order - asc or desc. Default sort order is distance from a point.
    # @option opts [String] :rows Number of results to return. Default is 10. Max is 50
    # @option opts [String] :start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
    # @option opts [String] :facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
    # @option opts [String] :stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
    # @option opts [String] :country Filter on Country, by default US. Search available on US (United States) and CA (Canada)
    # @option opts [String] :plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph
    # @option opts [BOOLEAN] :nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin
    # @option opts [String] :state Filter listsings on State
    # @option opts [String] :city Filter listings on city
    # @option opts [String] :dealer_name Filter listings on dealer_name
    # @option opts [String] :trim_o Filter listings on web scraped trim
    # @option opts [String] :trim_r Filter trim on custom possible matches
    # @option opts [String] :dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
    # @option opts [String] :dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
    # @option opts [String] :options Tokenizer search on options for multiple options use | as seperator
    # @option opts [String] :features Tokenizer search on features for multiple options use | as seperator
    # @option opts [BOOLEAN] :exclude_certified Boolean param to exclude certified cars from search results
    # @return [SearchResponse]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Gets active car listings for the given search criteria
    # This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 1000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom/msrp for your search
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [Float] :latitude Latitude component of location
    # @option opts [Float] :longitude Longitude component of location
    # @option opts [Integer] :radius Radius around the search location
    # @option opts [String] :zip car search bases on zipcode
    # @option opts [BOOLEAN] :include_lease Boolean param to search for listings that include leasing options in them
    # @option opts [BOOLEAN] :include_finance Boolean param to search for listings that include finance options in them
    # @option opts [String] :lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60
    # @option opts [String] :lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60
    # @option opts [String] :lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60
    # @option opts [String] :finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60
    # @option opts [String] :finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60
    # @option opts [String] :finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60
    # @option opts [String] :finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60
    # @option opts [String] :finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60
    # @option opts [String] :car_type Car type. Allowed values are - new / used / certified
    # @option opts [String] :seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated.
    # @option opts [String] :carfax_1_owner Indicates whether car has had only one owner or not
    # @option opts [String] :carfax_clean_title Indicates whether car has clean ownership records
    # @option opts [String] :year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated.
    # @option opts [String] :make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi
    # @option opts [String] :model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang.
    # @option opts [String] :trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated
    # @option opts [String] :dealer_id Dealer id to filter the cars.
    # @option opts [String] :vin Car vin to search
    # @option opts [String] :source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated
    # @option opts [String] :body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated.
    # @option opts [String] :body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
    # @option opts [String] :vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated
    # @option opts [String] :vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
    # @option opts [String] :taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
    # @option opts [String] :ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations.
    # @option opts [String] :match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
    # @option opts [String] :cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated
    # @option opts [String] :transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated
    # @option opts [String] :speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated
    # @option opts [String] :doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
    # @option opts [String] :drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated
    # @option opts [String] :exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
    # @option opts [String] :interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
    # @option opts [String] :engine Filter listings on engine
    # @option opts [String] :engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated
    # @option opts [String] :engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
    # @option opts [String] :engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
    # @option opts [String] :miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
    # @option opts [String] :price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
    # @option opts [String] :dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
    # @option opts [String] :sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point
    # @option opts [String] :sort_order Sort order - asc or desc. Default sort order is distance from a point.
    # @option opts [String] :rows Number of results to return. Default is 10. Max is 50
    # @option opts [String] :start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
    # @option opts [String] :facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
    # @option opts [String] :stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
    # @option opts [String] :country Filter on Country, by default US. Search available on US (United States) and CA (Canada)
    # @option opts [String] :plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph
    # @option opts [BOOLEAN] :nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin
    # @option opts [String] :state Filter listsings on State
    # @option opts [String] :city Filter listings on city
    # @option opts [String] :dealer_name Filter listings on dealer_name
    # @option opts [String] :trim_o Filter listings on web scraped trim
    # @option opts [String] :trim_r Filter trim on custom possible matches
    # @option opts [String] :dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
    # @option opts [String] :dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
    # @option opts [String] :options Tokenizer search on options for multiple options use | as seperator
    # @option opts [String] :features Tokenizer search on features for multiple options use | as seperator
    # @option opts [BOOLEAN] :exclude_certified Boolean param to exclude certified cars from search results
    # @return [Array<(SearchResponse, Fixnum, Hash)>] SearchResponse data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.search ...'
      end
      if @api_client.config.client_side_validation && opts[:'car_type'] && !['new', 'used', 'certified'].include?(opts[:'car_type'])
        fail ArgumentError, 'invalid value for "car_type", must be one of new, used, certified'
      end
      if @api_client.config.client_side_validation && opts[:'carfax_1_owner'] && !['true', 'false'].include?(opts[:'carfax_1_owner'])
        fail ArgumentError, 'invalid value for "carfax_1_owner", must be one of true, false'
      end
      if @api_client.config.client_side_validation && opts[:'carfax_clean_title'] && !['true', 'false'].include?(opts[:'carfax_clean_title'])
        fail ArgumentError, 'invalid value for "carfax_clean_title", must be one of true, false'
      end
      # resource path
      local_var_path = '/search'

      # query parameters
      query_params = {}
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'latitude'] = opts[:'latitude'] if !opts[:'latitude'].nil?
      query_params[:'longitude'] = opts[:'longitude'] if !opts[:'longitude'].nil?
      query_params[:'radius'] = opts[:'radius'] if !opts[:'radius'].nil?
      query_params[:'zip'] = opts[:'zip'] if !opts[:'zip'].nil?
      query_params[:'include_lease'] = opts[:'include_lease'] if !opts[:'include_lease'].nil?
      query_params[:'include_finance'] = opts[:'include_finance'] if !opts[:'include_finance'].nil?
      query_params[:'lease_term'] = opts[:'lease_term'] if !opts[:'lease_term'].nil?
      query_params[:'lease_down_payment'] = opts[:'lease_down_payment'] if !opts[:'lease_down_payment'].nil?
      query_params[:'lease_emp'] = opts[:'lease_emp'] if !opts[:'lease_emp'].nil?
      query_params[:'finance_loan_term'] = opts[:'finance_loan_term'] if !opts[:'finance_loan_term'].nil?
      query_params[:'finance_loan_apr'] = opts[:'finance_loan_apr'] if !opts[:'finance_loan_apr'].nil?
      query_params[:'finance_emp'] = opts[:'finance_emp'] if !opts[:'finance_emp'].nil?
      query_params[:'finance_down_payment'] = opts[:'finance_down_payment'] if !opts[:'finance_down_payment'].nil?
      query_params[:'finance_down_payment_per'] = opts[:'finance_down_payment_per'] if !opts[:'finance_down_payment_per'].nil?
      query_params[:'car_type'] = opts[:'car_type'] if !opts[:'car_type'].nil?
      query_params[:'seller_type'] = opts[:'seller_type'] if !opts[:'seller_type'].nil?
      query_params[:'carfax_1_owner'] = opts[:'carfax_1_owner'] if !opts[:'carfax_1_owner'].nil?
      query_params[:'carfax_clean_title'] = opts[:'carfax_clean_title'] if !opts[:'carfax_clean_title'].nil?
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'make'] = opts[:'make'] if !opts[:'make'].nil?
      query_params[:'model'] = opts[:'model'] if !opts[:'model'].nil?
      query_params[:'trim'] = opts[:'trim'] if !opts[:'trim'].nil?
      query_params[:'dealer_id'] = opts[:'dealer_id'] if !opts[:'dealer_id'].nil?
      query_params[:'vin'] = opts[:'vin'] if !opts[:'vin'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'body_type'] = opts[:'body_type'] if !opts[:'body_type'].nil?
      query_params[:'body_subtype'] = opts[:'body_subtype'] if !opts[:'body_subtype'].nil?
      query_params[:'vehicle_type'] = opts[:'vehicle_type'] if !opts[:'vehicle_type'].nil?
      query_params[:'vins'] = opts[:'vins'] if !opts[:'vins'].nil?
      query_params[:'taxonomy_vins'] = opts[:'taxonomy_vins'] if !opts[:'taxonomy_vins'].nil?
      query_params[:'ymmt'] = opts[:'ymmt'] if !opts[:'ymmt'].nil?
      query_params[:'match'] = opts[:'match'] if !opts[:'match'].nil?
      query_params[:'cylinders'] = opts[:'cylinders'] if !opts[:'cylinders'].nil?
      query_params[:'transmission'] = opts[:'transmission'] if !opts[:'transmission'].nil?
      query_params[:'speeds'] = opts[:'speeds'] if !opts[:'speeds'].nil?
      query_params[:'doors'] = opts[:'doors'] if !opts[:'doors'].nil?
      query_params[:'drivetrain'] = opts[:'drivetrain'] if !opts[:'drivetrain'].nil?
      query_params[:'exterior_color'] = opts[:'exterior_color'] if !opts[:'exterior_color'].nil?
      query_params[:'interior_color'] = opts[:'interior_color'] if !opts[:'interior_color'].nil?
      query_params[:'engine'] = opts[:'engine'] if !opts[:'engine'].nil?
      query_params[:'engine_type'] = opts[:'engine_type'] if !opts[:'engine_type'].nil?
      query_params[:'engine_aspiration'] = opts[:'engine_aspiration'] if !opts[:'engine_aspiration'].nil?
      query_params[:'engine_block'] = opts[:'engine_block'] if !opts[:'engine_block'].nil?
      query_params[:'miles_range'] = opts[:'miles_range'] if !opts[:'miles_range'].nil?
      query_params[:'price_range'] = opts[:'price_range'] if !opts[:'price_range'].nil?
      query_params[:'dom_range'] = opts[:'dom_range'] if !opts[:'dom_range'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'rows'] = opts[:'rows'] if !opts[:'rows'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'facets'] = opts[:'facets'] if !opts[:'facets'].nil?
      query_params[:'stats'] = opts[:'stats'] if !opts[:'stats'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'plot'] = opts[:'plot'] if !opts[:'plot'].nil?
      query_params[:'nodedup'] = opts[:'nodedup'] if !opts[:'nodedup'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'dealer_name'] = opts[:'dealer_name'] if !opts[:'dealer_name'].nil?
      query_params[:'trim_o'] = opts[:'trim_o'] if !opts[:'trim_o'].nil?
      query_params[:'trim_r'] = opts[:'trim_r'] if !opts[:'trim_r'].nil?
      query_params[:'dom_active_range'] = opts[:'dom_active_range'] if !opts[:'dom_active_range'].nil?
      query_params[:'dom_180_range'] = opts[:'dom_180_range'] if !opts[:'dom_180_range'].nil?
      query_params[:'options'] = opts[:'options'] if !opts[:'options'].nil?
      query_params[:'features'] = opts[:'features'] if !opts[:'features'].nil?
      query_params[:'exclude_certified'] = opts[:'exclude_certified'] if !opts[:'exclude_certified'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Marketcheck Cars API

#<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module Marketcheck_api_sdk
  class MarketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [MOCK] Get Averages for YMM
    # [Merged with the /search API - Please check the 'stats' parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
    # @param vin VIN as a reference to the type of car for which averages data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :year Year of the car
    # @option opts [String] :make Make of the car
    # @option opts [String] :model Model of the Car
    # @option opts [String] :trim Trim of the Car
    # @option opts [String] :fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)
    # @return [Averages]
    def get_averages(vin, opts = {})
      data, _status_code, _headers = get_averages_with_http_info(vin, opts)
      data
    end

    # [MOCK] Get Averages for YMM
    # [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
    # @param vin VIN as a reference to the type of car for which averages data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :year Year of the car
    # @option opts [String] :make Make of the car
    # @option opts [String] :model Model of the Car
    # @option opts [String] :trim Trim of the Car
    # @option opts [String] :fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)
    # @return [Array<(Averages, Fixnum, Hash)>] Averages data, response status code and response headers
    def get_averages_with_http_info(vin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_averages ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling MarketApi.get_averages"
      end
      # resource path
      local_var_path = '/averages'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'make'] = opts[:'make'] if !opts[:'make'].nil?
      query_params[:'model'] = opts[:'model'] if !opts[:'model'].nil?
      query_params[:'trim'] = opts[:'trim'] if !opts[:'trim'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Averages')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_averages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Compare market
    # [MOCK] Get historical market trends for cars matching the given VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
    # @param vin VIN as a reference to the type of car for which comparison data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [ComparisonPoint]
    def get_comparison(vin, opts = {})
      data, _status_code, _headers = get_comparison_with_http_info(vin, opts)
      data
    end

    # Compare market
    # [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
    # @param vin VIN as a reference to the type of car for which comparison data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(ComparisonPoint, Fixnum, Hash)>] ComparisonPoint data, response status code and response headers
    def get_comparison_with_http_info(vin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_comparison ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling MarketApi.get_comparison"
      end
      # resource path
      local_var_path = '/comparison'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComparisonPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_comparison\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Competitors
    # [MOCK] Competitor cars in market for current vin
    # @param vin VIN as a reference to the type of car for which competitors data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [CompetitorsPoint]
    def get_competition(vin, opts = {})
      data, _status_code, _headers = get_competition_with_http_info(vin, opts)
      data
    end

    # Competitors
    # [MOCK] Competitor cars in market for current vin
    # @param vin VIN as a reference to the type of car for which competitors data is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(CompetitorsPoint, Fixnum, Hash)>] CompetitorsPoint data, response status code and response headers
    def get_competition_with_http_info(vin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_competition ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling MarketApi.get_competition"
      end
      # resource path
      local_var_path = '/competition'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompetitorsPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_competition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Depreciation
    # [MOCK] Model resale value based on depreciation
    # @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [DepreciationPoint]
    def get_depreciation(vin, opts = {})
      data, _status_code, _headers = get_depreciation_with_http_info(vin, opts)
      data
    end

    # Depreciation
    # [MOCK] Model resale value based on depreciation
    # @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @return [Array<(DepreciationPoint, Fixnum, Hash)>] DepreciationPoint data, response status code and response headers
    def get_depreciation_with_http_info(vin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_depreciation ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling MarketApi.get_depreciation"
      end
      # resource path
      local_var_path = '/depreciation'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DepreciationPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_depreciation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Market Days Supply
    # Get the basic information on specifications for a car identified by a valid VIN
    # @param vin VIN to decode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [BOOLEAN] :exact Exact parameter (default to false)
    # @option opts [Float] :latitude Latitude component of location
    # @option opts [Float] :longitude Longitude component of location
    # @option opts [Integer] :radius Radius around the search location
    # @option opts [Integer] :debug Debug parameter (default to 0)
    # @option opts [BOOLEAN] :include_sold To fetch sold vins (default to false)
    # @return [Mds]
    def get_mds(vin, opts = {})
      data, _status_code, _headers = get_mds_with_http_info(vin, opts)
      data
    end

    # Market Days Supply
    # Get the basic information on specifications for a car identified by a valid VIN
    # @param vin VIN to decode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [BOOLEAN] :exact Exact parameter
    # @option opts [Float] :latitude Latitude component of location
    # @option opts [Float] :longitude Longitude component of location
    # @option opts [Integer] :radius Radius around the search location
    # @option opts [Integer] :debug Debug parameter
    # @option opts [BOOLEAN] :include_sold To fetch sold vins
    # @return [Array<(Mds, Fixnum, Hash)>] Mds data, response status code and response headers
    def get_mds_with_http_info(vin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_mds ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling MarketApi.get_mds"
      end
      # resource path
      local_var_path = '/mds'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'exact'] = opts[:'exact'] if !opts[:'exact'].nil?
      query_params[:'latitude'] = opts[:'latitude'] if !opts[:'latitude'].nil?
      query_params[:'longitude'] = opts[:'longitude'] if !opts[:'longitude'].nil?
      query_params[:'radius'] = opts[:'radius'] if !opts[:'radius'].nil?
      query_params[:'debug'] = opts[:'debug'] if !opts[:'debug'].nil?
      query_params[:'include_sold'] = opts[:'include_sold'] if !opts[:'include_sold'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mds')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_mds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Popularity
    # [MOCK] [Merged with the /search API - Please check the 'popularity' parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
    # @param year Year of the car
    # @param make Make of the car
    # @param model Model of the Car
    # @param trim Trim of the Car
    # @param body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
    # @return [Array<PopularityItem>]
    def get_popularity(year, make, model, trim, body_type, opts = {})
      data, _status_code, _headers = get_popularity_with_http_info(year, make, model, trim, body_type, opts)
      data
    end

    # Popularity
    # [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
    # @param year Year of the car
    # @param make Make of the car
    # @param model Model of the Car
    # @param trim Trim of the Car
    # @param body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
    # @return [Array<(Array<PopularityItem>, Fixnum, Hash)>] Array<PopularityItem> data, response status code and response headers
    def get_popularity_with_http_info(year, make, model, trim, body_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_popularity ...'
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling MarketApi.get_popularity"
      end
      # verify the required parameter 'make' is set
      if @api_client.config.client_side_validation && make.nil?
        fail ArgumentError, "Missing the required parameter 'make' when calling MarketApi.get_popularity"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling MarketApi.get_popularity"
      end
      # verify the required parameter 'trim' is set
      if @api_client.config.client_side_validation && trim.nil?
        fail ArgumentError, "Missing the required parameter 'trim' when calling MarketApi.get_popularity"
      end
      # verify the required parameter 'body_type' is set
      if @api_client.config.client_side_validation && body_type.nil?
        fail ArgumentError, "Missing the required parameter 'body_type' when calling MarketApi.get_popularity"
      end
      # resource path
      local_var_path = '/popularity'

      # query parameters
      query_params = {}
      query_params[:'year'] = year
      query_params[:'make'] = make
      query_params[:'model'] = model
      query_params[:'trim'] = trim
      query_params[:'body_type'] = body_type
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'stats'] = opts[:'stats'] if !opts[:'stats'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PopularityItem>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_popularity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get sales count by make, model, year, trim or taxonomy vin
    # Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :car_type Inventory type for which sales count is to be searched, default is used (default to used)
    # @option opts [String] :make Make for which sales count is to be searched
    # @option opts [String] :mm Make-Model for which sales count is to be searched, pipe seperated like mm&#x3D;ford|f-150
    # @option opts [String] :ymm Year-Make-Model for which sales count is to be searched, pipe seperated like ymm&#x3D;2015|ford|f-150
    # @option opts [String] :ymmt Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt&#x3D;2015|ford|f-150|platinum
    # @option opts [String] :taxonomy_vin taxonomy_vin for which sales count is to be searched
    # @option opts [String] :state State level sales count
    # @option opts [String] :city_state City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL
    # @option opts [String] :stats Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, dom (days on market) OR all
    # @return [Sales]
    def get_sales_count(opts = {})
      data, _status_code, _headers = get_sales_count_with_http_info(opts)
      data
    end

    # Get sales count by make, model, year, trim or taxonomy vin
    # Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :car_type Inventory type for which sales count is to be searched, default is used
    # @option opts [String] :make Make for which sales count is to be searched
    # @option opts [String] :mm Make-Model for which sales count is to be searched, pipe seperated like mm&#x3D;ford|f-150
    # @option opts [String] :ymm Year-Make-Model for which sales count is to be searched, pipe seperated like ymm&#x3D;2015|ford|f-150
    # @option opts [String] :ymmt Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt&#x3D;2015|ford|f-150|platinum
    # @option opts [String] :taxonomy_vin taxonomy_vin for which sales count is to be searched
    # @option opts [String] :state State level sales count
    # @option opts [String] :city_state City level sales count, pipe seperated like city_state&#x3D;jacksonville|FL
    # @option opts [String] :stats Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, dom (days on market) OR all
    # @return [Array<(Sales, Fixnum, Hash)>] Sales data, response status code and response headers
    def get_sales_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_sales_count ...'
      end
      if @api_client.config.client_side_validation && opts[:'car_type'] && !['new', 'used'].include?(opts[:'car_type'])
        fail ArgumentError, 'invalid value for "car_type", must be one of new, used'
      end
      # resource path
      local_var_path = '/sales'

      # query parameters
      query_params = {}
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'car_type'] = opts[:'car_type'] if !opts[:'car_type'].nil?
      query_params[:'make'] = opts[:'make'] if !opts[:'make'].nil?
      query_params[:'mm'] = opts[:'mm'] if !opts[:'mm'].nil?
      query_params[:'ymm'] = opts[:'ymm'] if !opts[:'ymm'].nil?
      query_params[:'ymmt'] = opts[:'ymmt'] if !opts[:'ymmt'].nil?
      query_params[:'taxonomy_vin'] = opts[:'taxonomy_vin'] if !opts[:'taxonomy_vin'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'city_state'] = opts[:'city_state'] if !opts[:'city_state'].nil?
      query_params[:'stats'] = opts[:'stats'] if !opts[:'stats'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Sales')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_sales_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Trends for criteria
    # Get historical market trends for cars matching the given VIN's basic specification or Year, Make, Model, Trim (Optional) criteria
    # @param vin VIN as a reference to the type of car for which trend data is to be returned
    # @param car_type Car type. Allowed values are - new / used / certified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :year Year of the car
    # @option opts [String] :make Make of the car
    # @option opts [String] :model Model of the Car
    # @option opts [String] :trim Trim of the Car
    # @return [Array<TrendPoint>]
    def get_trends(vin, car_type, opts = {})
      data, _status_code, _headers = get_trends_with_http_info(vin, car_type, opts)
      data
    end

    # Get Trends for criteria
    # Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
    # @param vin VIN as a reference to the type of car for which trend data is to be returned
    # @param car_type Car type. Allowed values are - new / used / certified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key The API Authentication Key. Mandatory with all API calls.
    # @option opts [String] :year Year of the car
    # @option opts [String] :make Make of the car
    # @option opts [String] :model Model of the Car
    # @option opts [String] :trim Trim of the Car
    # @return [Array<(Array<TrendPoint>, Fixnum, Hash)>] Array<TrendPoint> data, response status code and response headers
    def get_trends_with_http_info(vin, car_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_trends ...'
      end
      # verify the required parameter 'vin' is set
      if @api_client.config.client_side_validation && vin.nil?
        fail ArgumentError, "Missing the required parameter 'vin' when calling MarketApi.get_trends"
      end
      # verify the required parameter 'car_type' is set
      if @api_client.config.client_side_validation && car_type.nil?
        fail ArgumentError, "Missing the required parameter 'car_type' when calling MarketApi.get_trends"
      end
      # resource path
      local_var_path = '/trends'

      # query parameters
      query_params = {}
      query_params[:'vin'] = vin
      query_params[:'car_type'] = car_type
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'make'] = opts[:'make'] if !opts[:'make'].nil?
      query_params[:'model'] = opts[:'model'] if !opts[:'model'].nil?
      query_params[:'trim'] = opts[:'trim'] if !opts[:'trim'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrendPoint>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_trends\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
